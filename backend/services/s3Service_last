import { PutObjectCommand, DeleteObjectCommand } from '@aws-sdk/client-s3';
import { s3Client, S3_BUCKET } from '../config/aws.js';
import { v4 as uuidv4 } from 'uuid';
import path from 'path';

export const uploadImageToS3 = async (file, userId, category) => {
  try {
    console.log('Uploading image to S3:', {
      bucket: S3_BUCKET,
      userId,
      category,
      fileType: file.mimetype,
      fileSize: file.size,
      originalName: file.originalname
    });

    if (!file || !file.buffer) {
      throw new Error('Invalid file or missing buffer');
    }

    // Ensure we have a valid file extension
    const fileExtension = path.extname(file.originalname).toLowerCase() || '.jpg';
    const fileName = `${userId}/${category}/${uuidv4()}${fileExtension}`;

    // Ensure we have a valid content type
    const contentType = file.mimetype || 'image/jpeg';
    
    console.log('S3 upload details:', {
      fileName,
      contentType,
      bufferLength: file.buffer.length
    });

    const uploadParams = {
      Bucket: S3_BUCKET,
      Key: fileName,
      Body: file.buffer,
      ContentType: contentType,
      ACL: 'public-read',
    };

    await s3Client.send(new PutObjectCommand(uploadParams));
    
    // Construct the S3 URL
    const imageUrl = `https://${S3_BUCKET}.s3.amazonaws.com/${fileName}`;
    
    console.log('Image uploaded successfully:', imageUrl);
    return imageUrl;
  } catch (error) {
    console.error('Error uploading image to S3:', error);
    throw new Error(`Failed to upload image: ${error.message}`);
  }
};

export const deleteImageFromS3 = async (imageUrl) => {
  try {
    const url = new URL(imageUrl);
    const key = url.pathname.substring(1); // Remove leading slash

    const deleteParams = {
      Bucket: S3_BUCKET,
      Key: key,
    };

    await s3Client.send(new DeleteObjectCommand(deleteParams));
    console.log('Image deleted successfully from S3:', key);
  } catch (error) {
    console.error('Error deleting image from S3:', error);
    // Don't throw error as this is not critical
  }
};